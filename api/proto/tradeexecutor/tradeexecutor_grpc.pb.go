// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/tradeexecutor/tradeexecutor.proto

package tradeexecutor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TradeExecutor_PlaceOrder_FullMethodName = "/tradeexecutor.TradeExecutor/PlaceOrder"
	TradeExecutor_PauseBot_FullMethodName   = "/tradeexecutor.TradeExecutor/PauseBot"
	TradeExecutor_ResumeBot_FullMethodName  = "/tradeexecutor.TradeExecutor/ResumeBot"
)

// TradeExecutorClient is the client API for TradeExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeExecutorClient interface {
	PlaceOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	PauseBot(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotResponse, error)
	ResumeBot(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotResponse, error)
}

type tradeExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeExecutorClient(cc grpc.ClientConnInterface) TradeExecutorClient {
	return &tradeExecutorClient{cc}
}

func (c *tradeExecutorClient) PlaceOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, TradeExecutor_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeExecutorClient) PauseBot(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotResponse)
	err := c.cc.Invoke(ctx, TradeExecutor_PauseBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeExecutorClient) ResumeBot(ctx context.Context, in *BotRequest, opts ...grpc.CallOption) (*BotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotResponse)
	err := c.cc.Invoke(ctx, TradeExecutor_ResumeBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeExecutorServer is the server API for TradeExecutor service.
// All implementations must embed UnimplementedTradeExecutorServer
// for forward compatibility.
type TradeExecutorServer interface {
	PlaceOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	PauseBot(context.Context, *BotRequest) (*BotResponse, error)
	ResumeBot(context.Context, *BotRequest) (*BotResponse, error)
	mustEmbedUnimplementedTradeExecutorServer()
}

// UnimplementedTradeExecutorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradeExecutorServer struct{}

func (UnimplementedTradeExecutorServer) PlaceOrder(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedTradeExecutorServer) PauseBot(context.Context, *BotRequest) (*BotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseBot not implemented")
}
func (UnimplementedTradeExecutorServer) ResumeBot(context.Context, *BotRequest) (*BotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeBot not implemented")
}
func (UnimplementedTradeExecutorServer) mustEmbedUnimplementedTradeExecutorServer() {}
func (UnimplementedTradeExecutorServer) testEmbeddedByValue()                       {}

// UnsafeTradeExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeExecutorServer will
// result in compilation errors.
type UnsafeTradeExecutorServer interface {
	mustEmbedUnimplementedTradeExecutorServer()
}

func RegisterTradeExecutorServer(s grpc.ServiceRegistrar, srv TradeExecutorServer) {
	// If the following call pancis, it indicates UnimplementedTradeExecutorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TradeExecutor_ServiceDesc, srv)
}

func _TradeExecutor_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeExecutorServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeExecutor_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeExecutorServer).PlaceOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeExecutor_PauseBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeExecutorServer).PauseBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeExecutor_PauseBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeExecutorServer).PauseBot(ctx, req.(*BotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeExecutor_ResumeBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeExecutorServer).ResumeBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeExecutor_ResumeBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeExecutorServer).ResumeBot(ctx, req.(*BotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeExecutor_ServiceDesc is the grpc.ServiceDesc for TradeExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tradeexecutor.TradeExecutor",
	HandlerType: (*TradeExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _TradeExecutor_PlaceOrder_Handler,
		},
		{
			MethodName: "PauseBot",
			Handler:    _TradeExecutor_PauseBot_Handler,
		},
		{
			MethodName: "ResumeBot",
			Handler:    _TradeExecutor_ResumeBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/tradeexecutor/tradeexecutor.proto",
}
